#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## Copyright (C) 2016 Bitergia
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## Authors:
##   Jesus M. Gonzalez-Barahona <jgb@bitergia.com>
##

description = """
Compare a collection of Debian packages with upstream

The collection is read from a JSON file.

Examples:

debianlag --conf pkgs.json -l info

debianlag -c pkgs.json -l info --ratio 5 --range 5 --gitcache \
    --store debian-store

"""

import argparse
import logging
import tempfile
import techlag.gitlag
import datetime
import json
import os.path

def parse_args ():
    """
    Parse command line arguments

    """
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument("-c", "--conf", required=True,
                        help = "Git repo to compare")
    parser.add_argument("--after", type=str,
                        help = "Consider only commits after date (eg: 2016-01-31)")
    parser.add_argument("--before", type=str,
                        help = "Consider only commits before date (eg: 2016-01-31)")
    parser.add_argument("-l", "--logging", type=str, choices=["info", "debug"],
                        help = "Logging level for output")
    parser.add_argument("--logfile", type=str,
                        help = "Log file")
    parser.add_argument("--ratio", type=int, default=5,
                        help = "Ratio to calculate steps in each iteration")
    parser.add_argument("--range", type=int, default=5,
                        help = "Number of computed commits in the range in each iteration")
    parser.add_argument("--gitcache", action='store_true',
                        help = "Cache for results of git log")
    parser.add_argument("--store", type=str, default=None,
                        help = "Storage for intermediate files")
    args = parser.parse_args()
    return args

if __name__ == "__main__":
    args = parse_args()
    if args.logging:
        log_format = '%(levelname)s:%(message)s'
        if args.logging == "info":
            level = logging.INFO
        elif args.logging == "debug":
            level = logging.DEBUG
        if args.logfile:
            logging.basicConfig(format=log_format, level=level,
                                filename = args.logfile, filemode = "w")
        else:
            logging.basicConfig(format=log_format, level=level)

    with open(args.conf) as conf_file:
        conf = json.load(conf_file)

    if args.after:
        after = datetime.datetime.strptime(args.after, '%Y-%m-%d')
    else:
        after = None

    if args.store:
        store = args.store
    else:
        tmpdir = tempfile.TemporaryDirectory()
        store = tmpdir.name

    gitcache = None
    for pkg in conf:
        name = pkg['debian']['name']
        releases = pkg['debian']['distros']
        git_url = pkg['upstream']
        git_dir = os.path.join(store, name + '.git')
        if args.gitcache:
            gitcache = os.path.join(store, name + '.gitcache')
        upstream = techlag.gitlag.Repo(url=git_url, dir=git_dir,
                                        after=after, branches=['master'],
                                        cache=gitcache)

        for release in releases:
            dsc_file = techlag.gitlag.get_dpkg(name=name, release=release,
                                                dir=store)
            dir = techlag.gitlag.extract_dpkg(dsc_file)
            result = techlag.gitlag.lag(name=name+':'+release, upstream=upstream,
                dir=dir, after=after, ratio=args.ratio, range=args.range, store=store)
            result_str = "{}: technical lag to master HEAD is " \
                + "{} (normal effort), {} (commits), {} (lines), {} (files)"
            print (result_str.format(dir, result['normal_effort'],
                                result['diff_commits'],
                                result['different_lines'], result['different_files']),
                flush=True)
