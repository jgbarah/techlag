#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## Copyright (C) 2016 Bitergia
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## Authors:
##   Jesus M. Gonzalez-Barahona <jgb@bitergia.com>
##

description = """
Compare a collection of Debian packages with upstream

The collection is read from a JSON file, with references to Debian Snapshot.

Examples:

debsnapshotlag --conf snapshot.json -l info

debsnapshotlag -c snapshot.json -l info --ratio 5 --range 5 --gitcache \
    --store debian-store/ --logfile debsnapshotlag-logging.log

"""

import argparse
import logging
import tempfile
import techlag.gitlag
import datetime
import json
import os.path
import shelve

def parse_args ():
    """
    Parse command line arguments

    """
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument("-c", "--conf", required=True,
                        help = "Git repo to compare")
    parser.add_argument("--after", type=str,
                        help = "Consider only commits after date (eg: 2016-01-31)")
    parser.add_argument("--before", type=str,
                        help = "Consider only commits before date (eg: 2016-01-31)")
    parser.add_argument("-l", "--logging", type=str, choices=["info", "debug"],
                        help = "Logging level for output")
    parser.add_argument("--logfile", type=str,
                        help = "Log file")
    parser.add_argument("--ratio", type=int, default=5,
                        help = "Ratio to calculate steps in each iteration")
    parser.add_argument("--range", type=int, default=5,
                        help = "Number of computed commits in the range in each iteration")
    parser.add_argument("--gitcache", action='store_true',
                        help = "Cache for results of git log")
    parser.add_argument("--store", type=str, default=None,
                        help = "Storage for intermediate files")
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = parse_args()
    if args.logging:
        log_format = '%(levelname)s:%(message)s'
        if args.logging == "info":
            level = logging.INFO
        elif args.logging == "debug":
            level = logging.DEBUG
        if args.logfile:
            logging.basicConfig(format=log_format, level=level,
                                filename = args.logfile, filemode = "w")
        else:
            logging.basicConfig(format=log_format, level=level)

    with open(args.conf) as conf_file:
        conf = json.load(conf_file)

    if args.after:
        after = datetime.datetime.strptime(args.after, '%Y-%m-%d')
    else:
        after = None

    if args.store:
        store = args.store
    else:
        tmpdir = tempfile.TemporaryDirectory()
        store = tmpdir.name

    gitcache = None

    with shelve.open('data.shelve') as results:
        if 'done' not in results:
            results['done'] = {}
        results['missing'] = {}
        for pkg in conf:
            name = pkg['debsnapshot']['name']
            upstream_url = pkg['upstream']
            upstream_dir = os.path.join(store, name + '.git')

            if args.gitcache:
                gitcache = os.path.join(store, name + '.gitcache')
            upstream = techlag.gitlag.Repo(url=upstream_url, dir=upstream_dir,
                                        after=after, branches=['master'],
                                        cache=gitcache)

            versions_url = 'http://snapshot.debian.org/mr/package/' + name + '/'
            versions = techlag.gitlag.get_json(versions_url)

            for item in versions:
                version = item['version']
                logging.info("Version: " + version)

                package = name+':'+version
                if package in results['done']:
                    logging.info('Already computed:' + package + ' ' + str(results['done'][package]))
                    continue
                try:
                    (dsc_file, date) = techlag.gitlag.get_dpkg_snapshot(name=name,
                                                    version=version, dir=store)
                    logging.info("DSC: " + dsc_file)
                    dir = techlag.gitlag.extract_dpkg(dsc_file, remove=True)
                    result = techlag.gitlag.lag (name=package, upstream=upstream,
                                dir=dir, after=after,
                                ratio=args.ratio, range=args.range,
                                store=store)
                    results['done'][package] = {'date': date, 'result': result}
                except Exception as err:
                    results['missing'][package] = err.args
                    continue

        print("RESULTS:")
        print(results['done'])
        print("MISSING:")
        print(results['missing'])
