#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## Copyright (C) 2016 Bitergia
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## Authors:
##   Jesus M. Gonzalez-Barahona <jgb@bitergia.com>
##

description = """
Compare directories

Example:

gitlag --repo git.repo -p git-2.7.0 --after 2016-02-01 --steps 10 -l info

"""

import argparse
import logging
import tempfile
import techlag.gitlag
import datetime

def parse_args ():
    """
    Parse command line arguments

    """
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument("-r", "--repo",
                        help = "Git repo to compare")
    parser.add_argument("-p", "--pkg",
                        help = "Source package to compare")
    parser.add_argument("-d", "--dpkg",
                        help = "Debian source package to compare (dsc file)")
    parser.add_argument("--debian_name", nargs='+',
                        help = "Debian source packages, (name and releases). Ex: git stretch/main lenny/main")
    parser.add_argument("--after", type=str,
                        help = "Consider only commits after date (eg: 2016-01-31)")
    parser.add_argument("--before", type=str,
                        help = "Consider only commits before date (eg: 2016-01-31)")
    parser.add_argument("-l", "--logging", type=str, choices=["info", "debug"],
                        help = "Logging level for output")
    parser.add_argument("--logfile", type=str,
                        help = "Log file")
    parser.add_argument("--steps", type=int, default=1,
                        help = "Steps (compare every steps commits, instead of all)")
    args = parser.parse_args()
    return args

def lag (name, upstream, dir, after, steps, store):
    """Compute technical lag for directory with respect to upstream repository.

    :param name:      name of package being computed
    :type name:       string
    :params upstream: upstream git repository Metainformation
    :type upstream:   techlag.gitlago.Repo
    :params dir:      path to directory (source code derived from upstream repo)
    :params after:    check only commits after this date, format: %Y-%m-%d
    :type after:      datetime.datetime
    :params steps:     do approximation according to these steps
    :params store:    directory to store checkouts

    """

    up_commit = techlag.gitlag.find_upstream_commit (upstream=upstream, dir=dir,
                                                    after=after, steps=steps)
    logging.info ("{}: most similar upstream checkout is {} (diff: {}, date: {}, hash: {}).".format(
            name, up_commit['sequence'], up_commit['diff'],
            up_commit['date'], up_commit['hash']
            ))
    checkout = upstream.checkout(commit_no=upstream.last_commit(), store=store)
    metrics = upstream.compute_diff(commit_no=up_commit['sequence'], dir=checkout)
    logging.info (metrics)
    metrics['diff_commits'] = upstream.last_commit() - metrics['commit_seq']
    result_str = "{}: technical lag to master HEAD {} (commits), {} (lines), {} (files)"
    print (result_str.format(name, metrics['diff_commits'],
                            metrics['total_lines'], metrics['total_files']),
        flush=True)

if __name__ == "__main__":
    args = parse_args()
    if args.logging:
        log_format = '%(levelname)s:%(message)s'
        if args.logging == "info":
            level = logging.INFO
        elif args.logging == "debug":
            level = logging.DEBUG
        if args.logfile:
            logging.basicConfig(format=log_format, level=level,
                                filename = args.logfile, filemode = "w")
        else:
            logging.basicConfig(format=log_format, level=level)

    if args.dpkg:
        dir = techlag.gitlag.extract_dpkg(args.dpkg)
    elif args.debian_name:
        pkg_name = args.debian_name[0]
        pkg_releases = args.debian_name[1:]
    else:
        pkg_releases = []

    if args.after:
        after = datetime.datetime.strptime(args.after, '%Y-%m-%d')
    else:
        after = None

    upstream = techlag.gitlag.Repo(url=args.repo, dir=args.repo,
                                    after=after, branches=['master'])

    store = tempfile.TemporaryDirectory()
    if len(pkg_releases) > 0:
        for pkg_release in pkg_releases:
            dsc_file = techlag.gitlag.get_dpkg(name=pkg_name, release=pkg_release, dir=store.name)
            dir = techlag.gitlag.extract_dpkg(dsc_file)
            lag (name=pkg_name+':'+pkg_release, upstream=upstream,
                dir=dir, after=after, steps=args.steps, store=store.name)
    else:
        dir = args.pkg
        lag (upstream=upstream, dir=dir, after=after, steps=args.steps, store=store.name)
