#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## Copyright (C) 2016 Bitergia
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## Authors:
##   Jesus M. Gonzalez-Barahona <jgb@bitergia.com>
##

description = """
Compare a directory with a git repository to find the most likely checkout.

Assuming that a directory is similar to some checkout of a git repository,
compute metrics for comparing those checkouts with the directory, until
the most likely checkout (the one more similar to the directory) is found.

The directory can be the result of unpacking a Debian package, which will
be downloaed from the Debian repositories. In this case, several releases
of the same package can be retrieved and compared with the git repository.

Example:

gitlag --repo git.repo -p git-2.7.0 --after 2016-02-01 \
    --ratio 5 --range 5 -gitcache git.repo.cache -l info

gitlag --repo git.repo --debian_name git stretch/main \
    --ratio 5 --range 5 --gitcache git.repo.cache -l info

"""

import argparse
import logging
import tempfile
import techlag.gitlag
import datetime

def parse_args ():
    """
    Parse command line arguments

    """
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument("-r", "--repo",
                        help = "Git repo to compare")
    parser.add_argument("-p", "--pkg",
                        help = "Source package to compare")
    parser.add_argument("-d", "--dpkg",
                        help = "Debian source package to compare (dsc file)")
    parser.add_argument("--debian_name", nargs='+',
                        help = "Debian source packages, (name and releases). Ex: git stretch/main lenny/main")
    parser.add_argument("--after", type=str,
                        help = "Consider only commits after date (eg: 2016-01-31)")
    parser.add_argument("--before", type=str,
                        help = "Consider only commits before date (eg: 2016-01-31)")
    parser.add_argument("-l", "--logging", type=str, choices=["info", "debug"],
                        help = "Logging level for output")
    parser.add_argument("--logfile", type=str,
                        help = "Log file")
    parser.add_argument("--ratio", type=int, default=5,
                        help = "Ratio to calculate steps in each iteration")
    parser.add_argument("--range", type=int, default=5,
                        help = "Number of computed commits in the range in each iteration")
    parser.add_argument("--gitcache", type=str, default=None,
                        help = "Cache for results of git log")
    parser.add_argument("--store", type=str, default=None,
                        help = "Storage for intermediate files")
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    args = parse_args()
    if args.logging:
        log_format = '%(levelname)s:%(message)s'
        if args.logging == "info":
            level = logging.INFO
        elif args.logging == "debug":
            level = logging.DEBUG
        if args.logfile:
            logging.basicConfig(format=log_format, level=level,
                                filename = args.logfile, filemode = "w")
        else:
            logging.basicConfig(format=log_format, level=level)

    if args.dpkg:
        dir = techlag.gitlag.extract_dpkg(args.dpkg)
    elif args.debian_name:
        pkg_name = args.debian_name[0]
        pkg_releases = args.debian_name[1:]
    else:
        pkg_releases = []

    if args.after:
        after = datetime.datetime.strptime(args.after, '%Y-%m-%d')
    else:
        after = None

    if args.store:
        store = args.store
    else:
        tmpdir = tempfile.TemporaryDirectory()
        store = tmpdir.name

    upstream = techlag.gitlag.Repo(url=args.repo, dir=args.repo,
                                    after=after, branches=['master'],
                                    cache=args.gitcache)

    if len(pkg_releases) > 0:
        # Check Debian releases for the specified package
        for pkg_release in pkg_releases:
            dsc_file = techlag.gitlag.get_dpkg(name=pkg_name,
                                            release=pkg_release,
                                            dir=store)
            dir = techlag.gitlag.extract_dpkg(dsc_file)
            techlag.gitlag.lag(name=pkg_name+':'+pkg_release, upstream=upstream,
                dir=dir, after=after, ratio=args.ratio, range=args.range, store=store)
    else:
        # Checking only against one directory
        dir = args.pkg
        techlag.gitlag.lag (name=dir, upstream=upstream, dir=dir, after=after,
            ratio=args.ratio, range=args.range, store=store)
